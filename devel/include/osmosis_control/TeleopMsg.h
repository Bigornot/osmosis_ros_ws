// Generated by gencpp from file osmosis_control/TeleopMsg.msg
// DO NOT EDIT!


#ifndef OSMOSIS_CONTROL_MESSAGE_TELEOPMSG_H
#define OSMOSIS_CONTROL_MESSAGE_TELEOPMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>

namespace osmosis_control
{
template <class ContainerAllocator>
struct TeleopMsg_
{
  typedef TeleopMsg_<ContainerAllocator> Type;

  TeleopMsg_()
    : is_active(false)
    , cmd_vel()  {
    }
  TeleopMsg_(const ContainerAllocator& _alloc)
    : is_active(false)
    , cmd_vel(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _is_active_type;
  _is_active_type is_active;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _cmd_vel_type;
  _cmd_vel_type cmd_vel;





  typedef boost::shared_ptr< ::osmosis_control::TeleopMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::osmosis_control::TeleopMsg_<ContainerAllocator> const> ConstPtr;

}; // struct TeleopMsg_

typedef ::osmosis_control::TeleopMsg_<std::allocator<void> > TeleopMsg;

typedef boost::shared_ptr< ::osmosis_control::TeleopMsg > TeleopMsgPtr;
typedef boost::shared_ptr< ::osmosis_control::TeleopMsg const> TeleopMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::osmosis_control::TeleopMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::osmosis_control::TeleopMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace osmosis_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'osmosis_control': ['/home/afavier/osmosis_ws/src/osmosis_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::osmosis_control::TeleopMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::osmosis_control::TeleopMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::osmosis_control::TeleopMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::osmosis_control::TeleopMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::osmosis_control::TeleopMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::osmosis_control::TeleopMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::osmosis_control::TeleopMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "377211ff04d8aeef101557fb8d185e9f";
  }

  static const char* value(const ::osmosis_control::TeleopMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x377211ff04d8aeefULL;
  static const uint64_t static_value2 = 0x101557fb8d185e9fULL;
};

template<class ContainerAllocator>
struct DataType< ::osmosis_control::TeleopMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "osmosis_control/TeleopMsg";
  }

  static const char* value(const ::osmosis_control::TeleopMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::osmosis_control::TeleopMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool is_active\n\
geometry_msgs/Twist cmd_vel\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::osmosis_control::TeleopMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::osmosis_control::TeleopMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_active);
      stream.next(m.cmd_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TeleopMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::osmosis_control::TeleopMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::osmosis_control::TeleopMsg_<ContainerAllocator>& v)
  {
    s << indent << "is_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_active);
    s << indent << "cmd_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.cmd_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OSMOSIS_CONTROL_MESSAGE_TELEOPMSG_H
